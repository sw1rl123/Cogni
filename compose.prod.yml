services:
  rabbitmq:
    image: "rabbitmq:management"
    restart: always
    ports:
      - "5003:5672"
      - "15672:15672"  # Web UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  postgres:
    image: "postgres:latest"
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cogni
    ports:
      - "5004:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cogni"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  redis:
    image: redis:7.2.4-alpine
    restart: always
    environment:
      REDIS_ARGS: "--requirepass password --user user on >password ~* allcommands --user default off nopass nocommands"
    ports:
      - "5002:6379"
    command:
      [
        "redis-server",
        "--requirepass", "password",
        "--user", "user", "on", ">password", "~*", "allcommands",
        "--user", "default", "off", "nopass", "nocommands"
      ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  minio:
    image: minio/minio # image: minio/minio:RELEASE.2025-04-03T14-56-28Z-cpuv1 # FOR LOW-END CPUs
    restart: always
    environment:
      MINIO_HOST: "http://minio:9000"
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
      BUCKET_NAME: "chat-files"
    entrypoint: ["/bin/sh", "/data/init.sh"]
    ports:
      - "9000:9000"
    volumes:
      - ./minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  frontend:
    build:
      context: ./ChatDevFrontend
    restart: always
    depends_on:
      - cogni
      - chat_service_1
      # - chat_service_2
    volumes:
      - frontend-build:/usr/share/nginx/html

  haproxy:
    image: haproxy:latest
    restart: always
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "9100:80"
    depends_on:
      - cogni
      - chat_service_1
      # - chat_service_2
  cogni:
    build:
      context: .
      dockerfile: ./Cogni/Dockerfile
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      MIGRATE: "false"
    # depends_on:
    #   rabbitmq:
    #     condition: service_healthy
    #   postgres:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy
  # It's scalable!
  chat_service_1:
    build:
      context: .
      dockerfile: ./ChatService/Dockerfile
    image: chat-backend
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
  # chat_service_2:
  #   build:
  #     context: ./
  #   restart: always
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: "Production"
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

volumes:
  redis_data:
    driver: local
  frontend-build:
